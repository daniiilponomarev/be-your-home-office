service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: eu-west-1
  httpApi:
    cors: true
  environment:
    SNS_TOPIC_ARN:
      Ref: CreateProductTopic
    SQS_QUEUE_URL:
      Fn::ImportValue: ProductService-QueueUrl

iamRoleStatements:
  - Effect: "Allow"
    Action:
      - 's3:*'
    Resource: 'arn:aws:s3:::your-home-office-files1/*'
  - Effect: "Allow"
    Action:
      - "sqs:*"
    Resource:
      'Fn::ImportValue': ProductService-QueueArn
  - Effect: "Allow"
    Action:
      - "sns:*"
    Resource:
      Ref: CreateProductTopic

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"
#
# you can define service wide environment variables here
#  environment:
#    variable1: value1
#
# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProductsList:
    handler: getProductsList/index.handler
    events:
      - httpApi:
          path: /products
          method: get
          cors: true
    environment:
      ProductsTableName: 'products'
      StockTableName: 'stocks'
  getProductsById:
    handler: getProductsById/index.handler
    events:
      - httpApi:
          path: /products/{id}
          method: get
          cors: true
    environment:
      ProductsTableName: 'products'

  createProduct:
    handler: createProduct/index.handler
    events:
      - httpApi:
          method: POST
          path: /products
          cors: true
    environment:
      ProductsTableName: 'products'

  catalogBatchProcess:
    handler: catalogBatchProcess/index.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5
    environment:
      PRODUCTS_TABLE: 'products'
      STOCKS_TABLE: 'stocks'

#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello
#
#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    CatalogItemsQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: catalogItemsQueue

    CreateProductTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: createProductTopic

    EmailSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Endpoint: daniiil.ponomarev@gmail.com
        Protocol: email
        TopicArn:
          Ref: CreateProductTopic
  Outputs:
    QueueUrlExport:
      Description: "Catalog Items Queue URL"
      Value:
        Ref: CatalogItemsQueue
      Export:
        Name: "ProductService-QueueUrl"
    QueueArnExport:
      Description: "Catalog Items Queue ARN"
      Value:
        Fn::GetAtt:
          - CatalogItemsQueue
          - Arn
      Export:
        Name: "ProductService-QueueArn"
